        -:    0:Source:../src/client.c
        -:    1:/*creating TCP socket for client side and using various system calls like send(), connect(),  close() to connect to the server */
        -:    2: 
        -:    3://including header files for this particular code
        -:    4:#include <../inc/proto.h>
        -:    5:#include <../inc/client.h>
        -:    6:#define MINIMUM_USERNAME 2//minimum length of username
        -:    7:// Global variables
        -:    8:volatile sig_atomic_t flag = 0;//flag for client availability
        -:    9:int sockfd = 0;//socket number
        -:   10:char username[LENGTH_NAME] = {};//username
        -:   11:
        -:   12:/*Function names are lower_case. Opening braces on the next line*/
        -:   13:
        -:   14:/*Exit function*/
        2:   15:void catch_ctrl_c_and_exit(int sig) 
        -:   16:{
        2:   17:    flag = 1;
        2:   18:}
        -:   19:
        -:   20:/*Functionn for receiving message*/
        2:   21:void recv_msg_handler() 
        -:   22:{
        2:   23:    char receiveMessage[LENGTH_SEND] = {0};//receive message
        2:   24:    while (1) {
        4:   25:        int receive = recv(sockfd, receiveMessage, LENGTH_SEND, 0);//receive function returns integer value
        -:   26:        
        -:   27:        /*checking if message received successfully*/
        2:   28:        if (receive > 0) {
        2:   29:            printf("\r%s\n", receiveMessage);
        2:   30:            printf("\r%s", "> ");
        2:   31:            fflush(stdout);
    #####:   32:        } else if (receive == 0) {
    #####:   33:            break;
        -:   34:        } else { 
    #####:   35:            perror("Fatal Error.\n");
        -:   36:        }//end of else
        -:   37:    }//end of while
    #####:   38:}
        -:   39:
        -:   40:/*Function for sending message*/
        2:   41:void send_msg_handler() 
        -:   42:{
        2:   43:    char message[LENGTH_MSG] = {0};
        -:   44:    
        -:   45:    /*checking if message sent successfully*/
        -:   46:    while (1) 
        -:   47:    {
        2:   48:       printf("\r%s", "> ");
        2:   49:       fflush(stdout);
       2*:   50:        while (fgets(message, LENGTH_MSG, stdin) != NULL) 
        -:   51:        {
    #####:   52:            str_trim_lf(message, LENGTH_MSG);
    #####:   53:            if (strlen(message) == 0) {
    #####:   54:                printf("\r%s", "> ");
    #####:   55:                fflush(stdout);
        -:   56:            } else {
    #####:   57:                break;
        -:   58:            }
        -:   59:        }//end of while
    #####:   60:        send(sockfd, message, LENGTH_MSG, 0);
    #####:   61:        if (strcmp(message, "exit") == 0) {
    #####:   62:            break;
        -:   63:        }//end of if
        -:   64:    }//end of while
    #####:   65:    catch_ctrl_c_and_exit(EXIT_SUCCESS);
    #####:   66:}
        -:   67:
        -:   68:/* Main function for client*/
        2:   69:int main()
        -:   70:{   	
        -:   71:	//Thread declarations
        -:   72:	pthread_t recv_msg_thread;
        -:   73:	pthread_t send_msg_thread;
        -:   74:	
        -:   75:	/*Login function*/
        2:   76:    if(!login()){
    #####:   77:        	printf("Successfully Logout\n\n");
        -:   78:   	} 
        -:   79:	
        -:   80:	//if the login is successful
        -:   81:    else{
        2:   82:		signal(SIGINT, catch_ctrl_c_and_exit); //sigint to stop the current process and return to its main loop 
        -:   83:
        -:   84:		// Naming
        2:   85:		printf("Please enter your name: ");
        2:   86:		getchar(); 
        2:   87:		if (fgets(username, LENGTH_NAME, stdin) != NULL) 
        -:   88:		{
        2:   89:		    str_trim_lf(username, LENGTH_NAME);
        -:   90:		}
        2:   91:		if (strlen(username) < MINIMUM_USERNAME || strlen(username) >= LENGTH_NAME-1) 
        -:   92:		{
    #####:   93:		    printf("\nName must be more than one and less than thirty characters.\n");
    #####:   94:		    exit(EXIT_FAILURE);
        -:   95:		}
        -:   96:		//Creating socket for client side
        2:   97:		sockfd = socket(AF_INET , SOCK_STREAM , 0);//
        -:   98:		
        -:   99:		//Checking condition for socket creation
        2:  100:		if (sockfd < 0)
        -:  101:		{
    #####:  102:		    perror("Fail to create a socket.");  //error condition
    #####:  103:		    exit(EXIT_FAILURE);
        -:  104:		}
        -:  105:
        -:  106:		// Socket information
        -:  107:		struct sockaddr_in server_info, client_info; // declaring a sockaddr_in in structure.
        2:  108:		int ServerAddrLen = sizeof(server_info);
        2:  109:		int ClientAddrLen = sizeof(client_info);
        -:  110:		
        -:  111:		//memset() used to fill block of memory with a particular value    
        -:  112:		//function fills the first ServerAddrLen(size) bytes of the memory area pointed to by server_info with the 0.
        2:  113:		memset(&server_info, 0, ServerAddrLen); 
        2:  114:		memset(&client_info, 0, ClientAddrLen);
        -:  115:		
        -:  116:		//server information
        2:  117:		server_info.sin_family = PF_INET;  
        2:  118:		server_info.sin_addr.s_addr = inet_addr(IP); 
        2:  119:		server_info.sin_port = htons(PORT); 
        -:  120:
        -:  121:		// Connect to Server
        2:  122:		int err = connect(sockfd, (struct sockaddr *)&server_info, ServerAddrLen);
        2:  123:		if (err < 0) 
        -:  124:		{
    #####:  125:		    perror("Connection to Server error!\n");
    #####:  126:		    exit(EXIT_FAILURE);
        -:  127:		}
        -:  128:		
        -:  129:		//Functions used to get names of current client and server
        2:  130:		getsockname(sockfd, (struct sockaddr*) &client_info, (socklen_t*) &ClientAddrLen);
        2:  131:		getpeername(sockfd, (struct sockaddr*) &server_info, (socklen_t*) &ServerAddrLen);
        -:  132:		
        -:  133:		//Printing messages to inform user if connection established
        2:  134:		printf("Connect to Server: %s:%d\n", inet_ntoa(server_info.sin_addr), ntohs(server_info.sin_port));
        2:  135:		printf("You are: %s:%d\n", inet_ntoa(client_info.sin_addr), ntohs(client_info.sin_port));
        -:  136:
        -:  137:		//condition to check if message sent successfully
        2:  138:		if(send(sockfd, username, LENGTH_NAME, 0) < 0)
        -:  139:		{
    #####:  140:			perror("Send function failed.\n");
    #####:  141:			exit(EXIT_FAILURE);
        -:  142:		}
        -:  143:		
        -:  144:		//creating a thread for sending message
        2:  145:		if (pthread_create(&send_msg_thread, NULL, (void *) send_msg_handler, NULL) != 0) 
        -:  146:		{
    #####:  147:		    perror("Create pthread error!\n");
    #####:  148:		   	pthread_exit(&send_msg_thread);
        -:  149:		    exit(EXIT_FAILURE);
        -:  150:		}
        -:  151:		
        -:  152:		//creating a thread for receiving message
        2:  153:		if (pthread_create(&recv_msg_thread, NULL, (void *) recv_msg_handler, NULL) != 0) 
        -:  154:		{
    #####:  155:		    perror("Create pthread error!\n");
    #####:  156:		    pthread_exit(&recv_msg_thread);
        -:  157:		    exit(EXIT_FAILURE);
        -:  158:		}
        -:  159:		
        -:  160:		/*condition to check if the user exist*/
        -:  161:		while (1) 
        -:  162:		{
16668422592:  163:		    if(flag) 
        -:  164:		    {
        2:  165:		        printf("\nBye\n");
        2:  166:		        printf("Successfully Logout\n\n");
        2:  167:		        break;
        -:  168:		    }
        -:  169:		}//end of while
        2:  170:		close(sockfd);//closing socket 
        -:  171:	}//end of else
        2:  172:	return 0;
        -:  173:}
