        -:    0:Source:../src/server.c
        -:    1:/*creating TCP socket for server side and using various system calls like bind(), listen(), recv(), send(), close() to accept incoming connections from the client side and communicating with multiple clients by using TCP protocol. */
        -:    2: 
        -:    3://including header files for this particular code
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:#include <signal.h>
        -:    8:#include <unistd.h>
        -:    9:#include <sys/types.h>
        -:   10:#include <sys/socket.h>
        -:   11:#include <netinet/in.h>
        -:   12:#include <arpa/inet.h>
        -:   13:#include <pthread.h>
        -:   14:
        -:   15:#include <../inc/proto.h>
        -:   16:#include <../inc/server.h>
        -:   17:
        -:   18://structure for client node, its a doubly linked list
        -:   19:typedef struct ClientNode 
        -:   20:{
        -:   21:    int data;//store data of socket
        -:   22:    struct ClientNode* prev;//link to prevoius node
        -:   23:    struct ClientNode* link;//link to next node
        -:   24:    char ip[IP_ADDRESS];//ip address
        -:   25:    char name[LENGTH_NAME];//username
        -:   26:} ClientList;
        -:   27:
        -:   28://node creation for client list
        3:   29:ClientList *newNode(int sockfd, char* ip) 
        -:   30:{
        3:   31:    ClientList *np = (ClientList *)malloc( sizeof(ClientList) );//create new node np
        3:   32:    np->data = sockfd;//store socket information
        3:   33:    np->prev = NULL;
        3:   34:    np->link = NULL;
        3:   35:    strncpy(np->ip, ip, IP_ADDRESS);//copies the IP to the node
        3:   36:    strncpy(np->name, "NULL", LENGTH_NAME);//copies name to the node
        3:   37:    return np;
        -:   38:}
        -:   39:
        -:   40:// Global variables
        -:   41:int server_sockfd = 0, client_sockfd = 0;
        -:   42:ClientList *root, *now;
        -:   43:
        -:   44:/*Function names are lower_case. Opening braces on the next line*/
        -:   45:
        -:   46://Exit function
        1:   47:void catch_ctrl_c_and_exit(int sig) 
        -:   48:{
        -:   49:    ClientList *tmp;
        -:   50:    //checks if list is empty
        2:   51:    while (root != NULL) {
        1:   52:        printf("\nClose socketfd: %d\n", root->data);
        1:   53:        close(root->data); // close all socket include server_sockfd
        1:   54:        tmp = root;
        1:   55:        root = root->link;
        1:   56:        free(tmp);
        -:   57:    }
        1:   58:    printf("Bye\n");
        1:   59:    exit(EXIT_SUCCESS);
        -:   60:}
        -:   61:
        -:   62://sending message to all clients
        7:   63:void send_to_all_clients(ClientList *np, char tmp_buffer[]) 
        -:   64:{
        7:   65:    ClientList *tmp = root->link;
        -:   66:    //checks if list is empty
       19:   67:    while (tmp != NULL) 
        -:   68:    {
        -:   69:    	// all clients except itself
       12:   70:        if (np->data != tmp->data) 
        -:   71:        { 
        5:   72:            printf("Send to sockfd %d: \"%s\" \n", tmp->data, tmp_buffer);
        5:   73:            send(tmp->data, tmp_buffer, LENGTH_SEND, 0);
        -:   74:        }
       12:   75:        tmp = tmp->link;
        -:   76:    }
        7:   77:}
        -:   78:
        -:   79://handling client data
        2:   80:void client_handler(void *p_client) 
        -:   81:{
        2:   82:    int leave_flag = 0;
        2:   83:    char username[LENGTH_NAME] = {0};
        2:   84:    char recv_buffer[LENGTH_MSG] = {0};
        2:   85:    char send_buffer[LENGTH_SEND] = {0};
        2:   86:    ClientList *np = (ClientList *)p_client;
        -:   87:
        -:   88:    //Validating Name
        -:   89:    
        -:   90:    /*else and else if comes after the previous closing brace and not on
        -:   91:	 *the next line.*/
        2:   92:    if (recv(np->data, username, LENGTH_NAME, 0) <= 0 || strlen(username) < MINIMUM_USERNAME || strlen(username) >= LENGTH_NAME-1) 
        -:   93:    {
    #####:   94:        printf("%s didn't input name.\n", np->ip);
    #####:   95:        leave_flag = 1;
        -:   96:    } else {
        2:   97:        strncpy(np->name, username, LENGTH_NAME);
        2:   98:        printf("%s(%s)(%d) join the chatroom.\n", np->name, np->ip, np->data);
        2:   99:        sprintf(send_buffer, "%s(%s) join the chatroom.", np->name, np->ip);
        2:  100:        send_to_all_clients(np, send_buffer);
        -:  101:    }
        -:  102:
        -:  103:    // Conversation
        -:  104:    while (1) 
        5:  105:    {
        7:  106:        if (leave_flag) 
        -:  107:        {
        2:  108:            break;
        -:  109:        }
        5:  110:        int receive = recv(np->data, recv_buffer, LENGTH_MSG, 0);
        -:  111:        
        5:  112:        if (receive > 0) 
        -:  113:        {
       3*:  114:            if (strlen(recv_buffer) == 0) 
        -:  115:            {
    #####:  116:                continue;
        -:  117:            }
        3:  118:            sprintf(send_buffer, "%sï¼š%s from %s", np->name, recv_buffer, np->ip);
       2*:  119:        } else if (receive == 0 || strcmp(recv_buffer, "exit") == 0) 
        -:  120:        {
        2:  121:            printf("%s(%s)(%d) leave the chatroom.\n", np->name, np->ip, np->data);
        2:  122:            sprintf(send_buffer, "%s(%s) leave the chatroom.", np->name, np->ip);
        2:  123:            leave_flag = 1;
        -:  124:        } else 
        -:  125:        {
    #####:  126:            perror("Fatal Error: -1\n");
    #####:  127:            leave_flag = 1;
        -:  128:        }
        5:  129:        send_to_all_clients(np, send_buffer);
        -:  130:    }
        -:  131:
        -:  132:    // Remove Node
        2:  133:    close(np->data);
        2:  134:    if (np == now)// remove an edge node 
        -:  135:    { 
        2:  136:        now = np->prev;
        2:  137:        now->link = NULL;
        -:  138:    } else // remove a middle node
        -:  139:    {
    #####:  140:        np->prev->link = np->link;
    #####:  141:        np->link->prev = np->prev;
        -:  142:    }
        2:  143:    free(np);
        2:  144:}
        -:  145:
        -:  146:/* Main function to create a TCP socket , and also creating system calls like bind() and listen() and accept connection from the client*/
        1:  147:int main()
        -:  148:{
        -:  149:    char username[LENGTH_NAME]; //username
        -:  150:    char password[PASSWORD_LENGTH]; //password
        -:  151:    pthread_t id; //creating and defining thread id
        -:  152: 
        -:  153:    /*Signal to invoke the exit function*/
        1:  154:    signal(SIGINT, catch_ctrl_c_and_exit); //sigint to stop the current process and return to its main loop 
        -:  155: 
        -:  156: 	/*Server Login */
        1:  157:    printf("Enter your username: "); 
        1:  158:    scanf("%s",username); 
        -:  159: 
        1:  160:    printf("Enter your password: "); 
        1:  161:    scanf("%s",password); 
        -:  162: 
        1:  163:    if(strcmp(username,USERNAME_SERVER)==0){ 
        1:  164:    	if(strcmp(password,PASSWORD_SERVER)==0){ 
        -:  165: 
        1:  166:        	printf("\nWelcome.Login Success!\n"); 
        -:  167:        }else{ 
    #####:  168:    		perror("\nwrong password\n");
    #####:  169:    		exit(EXIT_FAILURE); 
        -:  170:		} 
        -:  171:    }else{ 
    #####:  172:    	perror("\nUser doesn't exist\n"); 
    #####:  173:    	exit(EXIT_FAILURE);
        -:  174:	} 
        -:  175: 
        -:  176: 	//Creating socket for server side
        1:  177:    server_sockfd = socket(AF_INET , SOCK_STREAM , 0);
        -:  178:    
        -:  179:    //Checking condition for socket creation
        1:  180:    if (server_sockfd < 0)   
        -:  181:    {
    #####:  182:        perror("Fail to create a socket.");  //error condition
    #####:  183:        exit(EXIT_FAILURE);
        -:  184:    }
        -:  185:
        -:  186:    //IP Address 
        -:  187:    struct sockaddr_in server_info, client_info; // declaring a sockaddr_in in structure
        -:  188:    
        1:  189:    int ServerAddrLen = sizeof(server_info);
        1:  190:    int ClientAddrLen = sizeof(client_info);
        -:  191:	
        -:  192:	//memset() used to fill block of memory with a particular value
        1:  193:    memset(&server_info, 0, ServerAddrLen);
        1:  194:    memset(&client_info, 0, ClientAddrLen);
        -:  195:    
        -:  196:    //Socket information
        1:  197:    server_info.sin_family = PF_INET; //info to which family it belongs (IPV4)
        1:  198:    server_info.sin_addr.s_addr = INADDR_ANY;  //address creation
        1:  199:    server_info.sin_port = htons(PORT);  //port address creation
        -:  200:
        -:  201:    //Bind and Listen system calls
        1:  202:    bind(server_sockfd, (struct sockaddr *)&server_info, ServerAddrLen);
        1:  203:    listen(server_sockfd, MAX_CLIENTS);
        -:  204:
        -:  205: 	//To print server IP
        1:  206:    getsockname(server_sockfd, (struct sockaddr*) &server_info, (socklen_t*) &ServerAddrLen);
        -:  207:       
        1:  208:    printf("Start Server on: %s:%d\n", inet_ntoa(server_info.sin_addr), ntohs(server_info.sin_port));
        -:  209:
        -:  210:    // Initial linked list for clients
        1:  211:    root = newNode(server_sockfd, inet_ntoa(server_info.sin_addr));
        1:  212:    now = root;
        -:  213:
        -:  214:    while (1) 
        2:  215:    {
        3:  216:        client_sockfd = accept(server_sockfd, (struct sockaddr*) &client_info, (socklen_t*) &ClientAddrLen);
        -:  217:		
        -:  218:        // Print Client IP
        2:  219:        getpeername(client_sockfd, (struct sockaddr*) &client_info, (socklen_t*) &ClientAddrLen);
        2:  220:        printf("Client %s:%d come in.\n", inet_ntoa(client_info.sin_addr), ntohs(client_info.sin_port));
        -:  221:
        -:  222:        // Append linked list for clients
        2:  223:        ClientList *c = newNode(client_sockfd, inet_ntoa(client_info.sin_addr));
        2:  224:        c->prev = now;
        2:  225:        now->link = c;
        2:  226:        now = c;
        -:  227:
        -:  228:		//condition to check if the thread created for client_handler 
        2:  229:  		if (pthread_create(&id, NULL, (void *)client_handler, (void *)c) != 0) 
        -:  230:  		{
    #####:  231:            perror("Create pthread error!\n");
    #####:  232:            pthread_exit(&id);
        -:  233:            exit(EXIT_FAILURE);
        -:  234:        }
        -:  235:    }
        -:  236:   return 0;
        -:  237:}
