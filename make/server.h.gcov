        -:    0:Source:/home/ayushi/Cprog/sprint2/inc/server.h
        -:    0:Graph:a-server.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1://header file for server
        -:    2:#ifndef _SERVER_H_
        -:    3:#define _SERVER_H_
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:#include <signal.h>
        -:    8:#include <unistd.h>
        -:    9:#include <sys/types.h>
        -:   10:#include <sys/socket.h>
        -:   11:#include <netinet/in.h>
        -:   12:#include <arpa/inet.h>
        -:   13:#include <pthread.h>
        -:   14:#include "/home/ayushi/Cprog/sprint2/inc/proto.h"
        -:   15:#define LENGTH_NAME 31//username length
        -:   16:#define LENGTH_MSG 101//receiver message length
        -:   17:#define LENGTH_SEND 201//sender message length
        -:   18:#define IP_ADDRESS 16//length of IP address
        -:   19:
        -:   20:#define PORT 8888//port number
        -:   21:#define IP "127.0.0.1"//IP address
        -:   22:#define MEETING_NAME "group3"//Meeting name
        -:   23:#define MEET_PASSWORD "abc"//password for client
        -:   24:#define PASSWORD_LENGTH 6//length of passoword
        -:   25:#define CHAR_LENGTH 2//minimum length of username
        -:   26:#define USERNAME_SERVER "server"//username of server
        -:   27:#define PASSWORD_SERVER "123"//password of server
        -:   28://structure for client node, its a doubly linked list
        -:   29:typedef struct ClientNode 
        -:   30:{
        -:   31:    int data;//store data of socket
        -:   32:    struct ClientNode* prev;//link to prevoius node
        -:   33:    struct ClientNode* link;//link to next node
        -:   34:    char ip[IP_ADDRESS];//ip address
        -:   35:    char name[LENGTH_NAME];//username
        -:   36:} ClientList;
        -:   37:
        -:   38://node creation for client list
    #####:   39:ClientList *newNode(int sockfd, char* ip) 
        -:   40:{
    #####:   41:    ClientList *np = (ClientList *)malloc( sizeof(ClientList) );//create new node np
    #####:   42:    np->data = sockfd;//store socket information
    #####:   43:    np->prev = NULL;
    #####:   44:    np->link = NULL;
    #####:   45:    strncpy(np->ip, ip, IP_ADDRESS);//copies the IP to the node
    #####:   46:    strncpy(np->name, "NULL", LENGTH_NAME);//copies name to the node
    #####:   47:    return np;
        -:   48:}
        -:   49:
        -:   50:#endif // LIST
